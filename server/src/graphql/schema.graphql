scalar DateTime

enum ReactionType {
  LIKE
  DISLIKE
  PLUSONE
  HEART
  CHILL
  ANGRY
  SADFACE
  POOP
  WOW
}

enum AchievementType{
  PEAK
}

type Query {
  me: User
  user(id: ID!): User!
  users: [User!]!
  peak(id: ID!): Peak!
  peaks: [Peak!]!
  expedition(id: ID!): Expedition!
  expeditions(filter: ExpeditionsFilterInput): [Expedition!]!
  chat(chatId: ID!): Chat!
  achievements: [Achievement!]!
}

type Mutation {
  updateMe(input: UpdateMeInput!): User!
  createExpedition(input: CreateExpeditionInput!): Expedition!
  updateExpedition(input: UpdateExpeditionInput!): Expedition!
  deleteExpedition(id: ID!): Expedition!
  signUpForExpedition(expeditionId: ID!): Expedition!
  signOffFromExpedition(expeditionId: ID!): Expedition!
  createExpeditionInvite(input: CreateExpeditionInviteInput!): ExpeditionInvite!
  deleteExpeditionInvite(id: ID!): ExpeditionInvite!
  createChat(otherUserId: ID!): Chat!
  changeChatName(chatId: ID!, name: String!): Chat!
  sendMessage(chatId: ID!, message: String!): Message!
  addReaction(messageId: ID!, reactionType: ReactionType!): Reaction!
  removeReaction(messageId: ID!): Reaction!
  startTrack(id: ID!): Track!
  stopTrack(id: ID!): Track!
  addTrackLocation(input: AddTrackLocationInput!): TrackLocation!
  addTrackPhoto(input: AddTrackPhotoInput!): TrackPhoto!
  deleteTrackPhoto(id: ID!): TrackPhoto!
  followUser(id: ID!): User!
  unfollowUser(id: ID!): User!
}

type Subscription {
  messageSent(chatId: ID!): Message!
  reactionAdded(chatId: ID!): Reaction!
  reactionRemoved(chatId: ID!): Reaction!
}

type User {
  id: ID!
  email: String!
  displayName: String!
  photoUrl: String!
  city: String!
  contact: String!
  authoredExpeditions: [Expedition!]!
  participatedExpeditions: [Expedition!]!
  sentExpeditionInvites: [ExpeditionInvite!]!
  receivedExpeditionInvites: [ExpeditionInvite!]!
  chats: [Chat!]!
  tracks: [Track!]!
  achievements: [Achievement!]!
  followers: [User!]!
  following: [User!]!
}

type Peak {
  id: ID!
  name: String!
  longitude: Float!
  latitude: Float!
  absHeight: Int!
  description: String!
  mountainRange: String!
  expeditions: [Expedition!]!
}

type Expedition {
  id: ID!
  peak: Peak!
  author: User!
  date: DateTime!
  title: String!
  description: String!
  maxParticipants: Int!
  participants: [User!]!
  tracks: [Track!]!
  chat: Chat!
}

type Track {
  id: ID!
  user: User!
  expedition: Expedition!
  started: Boolean!
  startedAt: DateTime
  stoppedAt: DateTime
  locations: [TrackLocation!]!
  photos: [TrackPhoto!]!
}

type TrackLocation {
  id: ID!
  latitude: Float!
  longitude: Float!
  timestamp: DateTime!
  track: Track!
}

type TrackPhoto {
  id: ID!
  latitude: Float!
  longitude: Float!
  timestamp: DateTime!
  photoUrl: String!
  description: String!
  track: Track!
}

type ExpeditionInvite {
  id: ID!
  from: User!
  to: User!
  expedition: Expedition!
  timestamp: DateTime!
}

type Chat {
  id: ID!
  name: String!
  startedAt: DateTime!
  messages(dateFrom: DateTime, dateTo: DateTime): [Message!]!
  users: [User!]!
}

type Message {
  id: ID!
  user: User!
  chat: Chat!
  content: String!
  time: DateTime!
  reactions: [Reaction!]!
}

type Reaction {
  id: ID!
  user: User!
  message: Message!
  type: ReactionType!
}

type Achievement{
  id: ID!
  title: String!
  description: String!
  metaId: ID!
  type: AchievementType!
}

# Filters

input ExpeditionsFilterInput {
  fromDate: DateTime
  toDate: DateTime
}

# Inputs

input UpdateMeInput {
  displayName: String!
  city: String!
  contact: String!
}

input CreateExpeditionInput {
  peakId: ID!
  date: DateTime!
  title: String!
  description: String!
  maxParticipants: Int!
}

input UpdateExpeditionInput {
  id: ID!
  date: DateTime!
  title: String!
  description: String
  maxParticipants: Int!
}

input CreateExpeditionInviteInput {
  toId: ID!
  expeditionId: ID!
}

input AddTrackLocationInput {
  trackId: ID!
  latitude: Float!
  longitude: Float!
}

input AddTrackPhotoInput {
  trackId: ID!
  latitude: Float!
  longitude: Float!
  photoUrl: String!
  description: String!
}
